:mod:`ape_compile._cli`
=======================

.. py:module:: ape_compile._cli




.. raw:: html

   <h3>Module Contents</h3>

**Classes**:

.. autoapisummary::

   ape_compile._cli._ContractsSource



**Functions**:

.. autoapisummary::

   ape_compile._cli.cli
   ape_compile._cli._warn_for_missing_extensions
   ape_compile._cli._display_byte_code_sizes



**Attributes**:

.. autoapisummary::

   ape_compile._cli.flatten



-----------


.. data:: flatten
   

   



.. py:class:: _ContractsSource(use_cache: bool)

   A helper class that is able to figure out which source files to
   compile.

   .. py:method:: __init__(self, use_cache: bool)


   .. py:method:: root(self) -> pathlib.Path
      :property:


   .. py:method:: select_paths(self, file_paths: Optional[List[pathlib.Path]])


   .. py:method:: compile(self) -> Dict[str, ape.types.ContractType]





.. py:function:: cli(cli_ctx, filepaths, use_cache, display_size)

   Compiles the manifest for this project and saves the results
   back to the manifest.

   Note that ape automatically recompiles any changed contracts each time
   a project is loaded. You do not have to manually trigger a recompile.




.. py:function:: _warn_for_missing_extensions(cli_ctx, registered_sources: List[pathlib.Path], all_sources: List[pathlib.Path])

   Figures out what extensions are missing from registered compilers and warns
   the user about them.




.. py:function:: _display_byte_code_sizes(cli_ctx, contract_types: Dict[str, ape.types.ContractType])



