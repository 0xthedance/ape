:mod:`ape.options`
==================

.. py:module:: ape.options




.. raw:: html

   <h3>Module Contents</h3>

**Classes**:

.. autoapisummary::

   ape.options.NetworkChoice
   ape.options.Alias



**Functions**:

.. autoapisummary::

   ape.options.verbose_option
   ape.options._require_non_existing_alias
   ape.options.existing_alias_argument



**Attributes**:

.. autoapisummary::

   ape.options.network_option
   ape.options.non_existing_alias_argument



-----------


.. py:class:: NetworkChoice(case_sensitive=True)

   Bases: :py:obj:`click.Choice`

   Wraps ``click.Choice`` to provide network choice defaults for the active project.

   .. py:method:: __init__(self, case_sensitive=True)


   .. py:method:: get_metavar(self, param)

      Returns the metavar default for this param if it provides one.





.. data:: network_option
   

   



.. py:function:: verbose_option(help='')




.. py:class:: Alias(account_type: Optional[Type[ape.api.accounts.AccountAPI]] = None)

   Bases: :py:obj:`click.Choice`

   Wraps ``click.Choice`` to load account aliases for the active project at runtime.

   Provide an ``account_type`` to limit the type of account to choose from.
   Defaults to all account types in ``choices()``.

   .. attribute:: name
      :annotation: = alias

      

   .. py:method:: __init__(self, account_type: Optional[Type[ape.api.accounts.AccountAPI]] = None)


   .. py:method:: choices(self) -> List[str]
      :property:





.. py:function:: _require_non_existing_alias(arg)




.. py:function:: existing_alias_argument(account_type: Optional[Type[ape.api.accounts.AccountAPI]] = None)




.. data:: non_existing_alias_argument
   

   


