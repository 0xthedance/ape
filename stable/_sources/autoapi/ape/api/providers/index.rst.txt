:mod:`ape.api.providers`
========================

.. py:module:: ape.api.providers




.. raw:: html

   <h3>Module Contents</h3>

**Classes**:

.. autoapisummary::

   ape.api.providers.TransactionType
   ape.api.providers.TransactionAPI
   ape.api.providers.TransactionStatusEnum
   ape.api.providers.ReceiptAPI
   ape.api.providers.ProviderAPI
   ape.api.providers.TestProviderAPI
   ape.api.providers.Web3Provider





-----------


.. py:class:: TransactionType

   Bases: :py:obj:`enum.Enum`

   Generic enumeration.

   Derive from this class to define new enumerations.

   .. attribute:: STATIC
      :annotation: = 0x0

      

   .. attribute:: DYNAMIC
      :annotation: = 0x2

      




.. py:class:: TransactionAPI

   .. attribute:: chain_id
      :annotation: :int = 0

      

   .. attribute:: sender
      :annotation: :str = 

      

   .. attribute:: receiver
      :annotation: :str = 

      

   .. attribute:: nonce
      :annotation: :Optional[int]

      

   .. attribute:: value
      :annotation: :int = 0

      

   .. attribute:: gas_limit
      :annotation: :Optional[int]

      

   .. attribute:: data
      :annotation: :bytes = b''

      

   .. attribute:: type
      :annotation: :TransactionType

      

   .. attribute:: signature
      :annotation: :Optional[ape.types.TransactionSignature]

      

   .. py:method:: __post_init__(self)


   .. py:method:: max_fee(self) -> int
      :property:

      The total amount in fees willing to be spent on a transaction.
      Override this property as needed, such as for EIP-1559 differences.

      See :class:`~ape_ethereum.ecosystem.StaticFeeTransaction` and
      :class`~ape_ethereum.ecosystem.DynamicFeeTransaction` as examples.


   .. py:method:: total_transfer_value(self) -> int
      :property:

      The total amount of WEI that a transaction could use.
      Useful for determining if an account balance can afford
      to submit the transaction.


   .. py:method:: is_valid(self)
      :property:


   .. py:method:: encode(self) -> bytes
      :abstractmethod:

      Take this object and produce a hash to sign to submit a transaction


   .. py:method:: as_dict(self) -> dict


   .. py:method:: __repr__(self) -> str

      Return repr(self).


   .. py:method:: __str__(self) -> str

      Return str(self).





.. py:class:: TransactionStatusEnum

   Bases: :py:obj:`enum.IntEnum`

   Enum where members are also (and must be) ints

   .. attribute:: FAILING
      :annotation: = 0

      

   .. attribute:: NO_ERROR
      :annotation: = 1

      




.. py:class:: ReceiptAPI

   .. attribute:: txn_hash
      :annotation: :str

      

   .. attribute:: status
      :annotation: :TransactionStatusEnum

      

   .. attribute:: block_number
      :annotation: :int

      

   .. attribute:: gas_used
      :annotation: :int

      

   .. attribute:: gas_price
      :annotation: :int

      

   .. attribute:: logs
      :annotation: :List[dict] = []

      

   .. attribute:: contract_address
      :annotation: :Optional[str]

      

   .. py:method:: __post_init__(self)


   .. py:method:: __str__(self) -> str

      Return str(self).


   .. py:method:: raise_for_status(self, txn: TransactionAPI)

      Handle provider-specific errors regarding a non-successful
      :class:`~api.providers.TransactionStatusEnum`.


   .. py:method:: ran_out_of_gas(self, gas_limit: int) -> bool

      Returns ``True`` when the transaction failed and used the
      same amount of gas as the given ``gas_limit``.


   .. py:method:: decode(cls, data: dict) -> ReceiptAPI
      :classmethod:
      :abstractmethod:





.. py:class:: ProviderAPI

   A Provider must work with a particular Network in a particular Ecosystem

   .. attribute:: name
      :annotation: :str

      

   .. attribute:: network
      :annotation: :ape.api.networks.NetworkAPI

      

   .. attribute:: config
      :annotation: :ape.api.config.ConfigItem

      

   .. attribute:: provider_settings
      :annotation: :dict

      

   .. attribute:: data_folder
      :annotation: :pathlib.Path

      

   .. attribute:: request_header
      :annotation: :str

      

   .. py:method:: connect(self)
      :abstractmethod:


   .. py:method:: disconnect(self)
      :abstractmethod:


   .. py:method:: update_settings(self, new_settings: dict)
      :abstractmethod:


   .. py:method:: chain_id(self) -> int
      :property:


   .. py:method:: get_balance(self, address: str) -> int
      :abstractmethod:


   .. py:method:: get_code(self, address: str) -> bytes
      :abstractmethod:


   .. py:method:: get_nonce(self, address: str) -> int
      :abstractmethod:


   .. py:method:: estimate_gas_cost(self, txn: TransactionAPI) -> int
      :abstractmethod:


   .. py:method:: gas_price(self) -> int
      :property:


   .. py:method:: priority_fee(self) -> int
      :property:


   .. py:method:: base_fee(self) -> int
      :property:


   .. py:method:: send_call(self, txn: TransactionAPI) -> bytes
      :abstractmethod:


   .. py:method:: get_transaction(self, txn_hash: str) -> ReceiptAPI
      :abstractmethod:


   .. py:method:: send_transaction(self, txn: TransactionAPI) -> ReceiptAPI
      :abstractmethod:


   .. py:method:: get_events(self, **filter_params) -> Iterator[dict]
      :abstractmethod:





.. py:class:: TestProviderAPI

   Bases: :py:obj:`ProviderAPI`

   An API for providers that have development functionality, such as snapshotting.

   .. py:method:: snapshot(self) -> str
      :abstractmethod:


   .. py:method:: revert(self, snapshot_id: str)
      :abstractmethod:





.. py:class:: Web3Provider

   Bases: :py:obj:`ProviderAPI`

   A base provider that is web3 based.

   .. attribute:: _web3
      :annotation: :web3.Web3

      

   .. py:method:: update_settings(self, new_settings: dict)

      Update the provider settings and re-connect.


   .. py:method:: estimate_gas_cost(self, txn: TransactionAPI) -> int

      Generates and returns an estimate of how much gas is necessary
      to allow the transaction to complete.
      The transaction will not be added to the blockchain.


   .. py:method:: chain_id(self) -> int
      :property:

      Returns the currently configured chain ID,
      a value used in replay-protected transaction signing as introduced by EIP-155.


   .. py:method:: gas_price(self) -> int
      :property:

      Returns the current price per gas in wei.


   .. py:method:: priority_fee(self) -> int
      :property:

      Returns the current max priority fee per gas in wei.


   .. py:method:: base_fee(self) -> int
      :property:


   .. py:method:: get_nonce(self, address: str) -> int

      Returns the number of transactions sent from an address.


   .. py:method:: get_balance(self, address: str) -> int

      Returns the balance of the account of a given address.


   .. py:method:: get_code(self, address: str) -> bytes

      Returns code at a given address.


   .. py:method:: send_call(self, txn: TransactionAPI) -> bytes

      Executes a new message call immediately without creating a
      transaction on the block chain.


   .. py:method:: get_transaction(self, txn_hash: str) -> ReceiptAPI

      Returns the information about a transaction requested by transaction hash.


   .. py:method:: get_events(self, **filter_params) -> Iterator[dict]

      Returns an array of all logs matching a given set of filter parameters.


   .. py:method:: send_transaction(self, txn: TransactionAPI) -> ReceiptAPI




