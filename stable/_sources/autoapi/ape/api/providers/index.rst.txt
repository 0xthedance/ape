:mod:`ape.api.providers`
========================

.. py:module:: ape.api.providers




.. raw:: html

   <h3>Module Contents</h3>

**Classes**:

.. autoapisummary::

   ape.api.providers.TransactionType
   ape.api.providers.TransactionAPI
   ape.api.providers.TransactionStatusEnum
   ape.api.providers.ConfirmationsProgressBar
   ape.api.providers.ReceiptAPI
   ape.api.providers.BlockGasAPI
   ape.api.providers.BlockConsensusAPI
   ape.api.providers.BlockAPI
   ape.api.providers.ProviderAPI
   ape.api.providers.TestProviderAPI
   ape.api.providers.Web3Provider
   ape.api.providers.UpstreamProvider





-----------


.. py:class:: TransactionType

   Bases: :py:obj:`enum.Enum`

   Generic enumeration.

   Derive from this class to define new enumerations.

   .. attribute:: STATIC
      :annotation: = 0x0

      

   .. attribute:: DYNAMIC
      :annotation: = 0x2

      




.. py:class:: TransactionAPI

   .. attribute:: chain_id
      :annotation: :int = 0

      

   .. attribute:: sender
      :annotation: :str = 

      

   .. attribute:: receiver
      :annotation: :str = 

      

   .. attribute:: nonce
      :annotation: :Optional[int]

      

   .. attribute:: value
      :annotation: :int = 0

      

   .. attribute:: gas_limit
      :annotation: :Optional[int]

      

   .. attribute:: data
      :annotation: :bytes = b''

      

   .. attribute:: type
      :annotation: :TransactionType

      

   .. attribute:: required_confirmations
      :annotation: :Optional[int]

      

   .. attribute:: signature
      :annotation: :Optional[ape.types.TransactionSignature]

      

   .. py:method:: __post_init__(self)


   .. py:method:: max_fee(self) -> int
      :property:

      The total amount in fees willing to be spent on a transaction.
      Override this property as needed, such as for EIP-1559 differences.

      See :class:`~ape_ethereum.ecosystem.StaticFeeTransaction` and
      :class`~ape_ethereum.ecosystem.DynamicFeeTransaction` as examples.


   .. py:method:: total_transfer_value(self) -> int
      :property:

      The total amount of WEI that a transaction could use.
      Useful for determining if an account balance can afford
      to submit the transaction.


   .. py:method:: is_valid(self)
      :property:


   .. py:method:: encode(self) -> bytes
      :abstractmethod:

      Take this object and produce a hash to sign to submit a transaction


   .. py:method:: as_dict(self) -> dict


   .. py:method:: __repr__(self) -> str

      Return repr(self).


   .. py:method:: __str__(self) -> str

      Return str(self).





.. py:class:: TransactionStatusEnum

   Bases: :py:obj:`enum.IntEnum`

   Enum where members are also (and must be) ints

   .. attribute:: FAILING
      :annotation: = 0

      

   .. attribute:: NO_ERROR
      :annotation: = 1

      




.. py:class:: ConfirmationsProgressBar(confirmations: int)

   A progress bar tracking the confirmations of a transaction.

   .. py:method:: __init__(self, confirmations: int)


   .. py:method:: __enter__(self)


   .. py:method:: __exit__(self, exc_type, exc_val, exc_tb)


   .. py:method:: confs(self) -> int
      :property:


   .. py:method:: _update_bar(self, amount: int)


   .. py:method:: _set_description(self)





.. py:class:: ReceiptAPI

   .. attribute:: provider
      :annotation: :ProviderAPI

      

   .. attribute:: txn_hash
      :annotation: :str

      

   .. attribute:: status
      :annotation: :TransactionStatusEnum

      

   .. attribute:: block_number
      :annotation: :int

      

   .. attribute:: gas_used
      :annotation: :int

      

   .. attribute:: gas_price
      :annotation: :int

      

   .. attribute:: logs
      :annotation: :List[dict] = []

      

   .. attribute:: contract_address
      :annotation: :Optional[str]

      

   .. attribute:: required_confirmations
      :annotation: :int = 0

      

   .. attribute:: sender
      :annotation: :str

      

   .. attribute:: nonce
      :annotation: :int

      

   .. py:method:: __post_init__(self)


   .. py:method:: __str__(self) -> str

      Return str(self).


   .. py:method:: raise_for_status(self, txn: TransactionAPI)

      Handle provider-specific errors regarding a non-successful
      :class:`~api.providers.TransactionStatusEnum`.


   .. py:method:: ran_out_of_gas(self, gas_limit: int) -> bool

      Returns ``True`` when the transaction failed and used the
      same amount of gas as the given ``gas_limit``.


   .. py:method:: decode(cls, data: dict) -> ReceiptAPI
      :classmethod:
      :abstractmethod:


   .. py:method:: await_confirmations(self) -> ReceiptAPI

      Waits for a transaction to be considered confirmed.
      Returns the confirmed receipt.





.. py:class:: BlockGasAPI

   .. attribute:: gas_limit
      :annotation: :int

      

   .. attribute:: gas_used
      :annotation: :int

      

   .. attribute:: base_fee
      :annotation: :Optional[int]

      

   .. py:method:: decode(cls, data: Dict) -> BlockGasAPI
      :classmethod:
      :abstractmethod:





.. py:class:: BlockConsensusAPI

   .. attribute:: difficulty
      :annotation: :Optional[int]

      

   .. attribute:: total_difficulty
      :annotation: :Optional[int]

      

   .. py:method:: decode(cls, data: Dict) -> BlockConsensusAPI
      :classmethod:
      :abstractmethod:





.. py:class:: BlockAPI

   .. attribute:: gas_data
      :annotation: :BlockGasAPI

      

   .. attribute:: consensus_data
      :annotation: :BlockConsensusAPI

      

   .. attribute:: hash
      :annotation: :hexbytes.HexBytes

      

   .. attribute:: number
      :annotation: :int

      

   .. attribute:: parent_hash
      :annotation: :hexbytes.HexBytes

      

   .. attribute:: size
      :annotation: :int

      

   .. attribute:: timestamp
      :annotation: :float

      

   .. py:method:: decode(cls, data: Dict) -> BlockAPI
      :classmethod:
      :abstractmethod:





.. py:class:: ProviderAPI

   A Provider must work with a particular Network in a particular Ecosystem

   .. attribute:: name
      :annotation: :str

      

   .. attribute:: network
      :annotation: :ape.api.networks.NetworkAPI

      

   .. attribute:: config
      :annotation: :ape.api.config.ConfigItem

      

   .. attribute:: provider_settings
      :annotation: :dict

      

   .. attribute:: data_folder
      :annotation: :pathlib.Path

      

   .. attribute:: request_header
      :annotation: :str

      

   .. py:method:: connect(self)
      :abstractmethod:


   .. py:method:: disconnect(self)
      :abstractmethod:


   .. py:method:: update_settings(self, new_settings: dict)
      :abstractmethod:


   .. py:method:: chain_id(self) -> int
      :property:


   .. py:method:: get_balance(self, address: str) -> int
      :abstractmethod:


   .. py:method:: get_code(self, address: str) -> bytes
      :abstractmethod:


   .. py:method:: get_nonce(self, address: str) -> int
      :abstractmethod:


   .. py:method:: estimate_gas_cost(self, txn: TransactionAPI) -> int
      :abstractmethod:


   .. py:method:: gas_price(self) -> int
      :property:


   .. py:method:: priority_fee(self) -> int
      :property:


   .. py:method:: base_fee(self) -> int
      :property:


   .. py:method:: get_block(self, block_id: ape.types.BlockID) -> BlockAPI
      :abstractmethod:


   .. py:method:: send_call(self, txn: TransactionAPI) -> bytes
      :abstractmethod:


   .. py:method:: get_transaction(self, txn_hash: str) -> ReceiptAPI
      :abstractmethod:


   .. py:method:: send_transaction(self, txn: TransactionAPI) -> ReceiptAPI
      :abstractmethod:


   .. py:method:: get_events(self, **filter_params) -> Iterator[dict]
      :abstractmethod:





.. py:class:: TestProviderAPI

   Bases: :py:obj:`ProviderAPI`

   An API for providers that have development functionality, such as snapshotting.

   .. py:method:: snapshot(self) -> str
      :abstractmethod:


   .. py:method:: revert(self, snapshot_id: str)
      :abstractmethod:





.. py:class:: Web3Provider

   Bases: :py:obj:`ProviderAPI`

   A base provider that is web3 based.

   .. attribute:: _web3
      :annotation: :web3.Web3

      

   .. py:method:: update_settings(self, new_settings: dict)

      Update the provider settings and re-connect.


   .. py:method:: estimate_gas_cost(self, txn: TransactionAPI) -> int

      Generates and returns an estimate of how much gas is necessary
      to allow the transaction to complete.
      The transaction will not be added to the blockchain.


   .. py:method:: chain_id(self) -> int
      :property:

      Returns the currently configured chain ID,
      a value used in replay-protected transaction signing as introduced by EIP-155.


   .. py:method:: gas_price(self) -> int
      :property:

      Returns the current price per gas in wei.


   .. py:method:: priority_fee(self) -> int
      :property:

      Returns the current max priority fee per gas in wei.


   .. py:method:: base_fee(self) -> int
      :property:

      Returns the current base fee from the latest block.

      NOTE: If your chain does not support base_fees (EIP-1559),
      this method will raise a not-implemented error.


   .. py:method:: get_block(self, block_id: ape.types.BlockID) -> BlockAPI

      Returns a block for the given ID.

      Args:
          block_id: The ID of the block to get. Set as
            "latest" to get the latest block,
            "earliest" to get the earliest block,
            "pending" to get the pending block,
            or pass in a block number or hash.

      Returns:
          The block for the given block ID.


   .. py:method:: get_nonce(self, address: str) -> int

      Returns the number of transactions sent from an address.


   .. py:method:: get_balance(self, address: str) -> int

      Returns the balance of the account of a given address.


   .. py:method:: get_code(self, address: str) -> bytes

      Returns code at a given address.


   .. py:method:: send_call(self, txn: TransactionAPI) -> bytes

      Executes a new message call immediately without creating a
      transaction on the block chain.


   .. py:method:: get_transaction(self, txn_hash: str, required_confirmations: int = 0) -> ReceiptAPI

      Returns the information about a transaction requested by transaction hash.

      Params:
          txn_hash (str): The hash of the transaction to retrieve.
          required_confirmations (int): If more than 0, waits for that many
              confirmations before returning the receipt. This is to increase confidence
              that your transaction is in its final position on the blockchain. Defaults
              to 0.

      Returns:
          The receipt of the transaction with the given hash.


   .. py:method:: get_events(self, **filter_params) -> Iterator[dict]

      Returns an array of all logs matching a given set of filter parameters.


   .. py:method:: send_transaction(self, txn: TransactionAPI) -> ReceiptAPI





.. py:class:: UpstreamProvider

   Bases: :py:obj:`ProviderAPI`

   A provider that can also be set as another provider's upstream.

   .. py:method:: connection_str(self) -> str
      :property:

      The str used by downstream providers to connect to this one.
      For example, the URL for HTTP-based providers.




