:mod:`ape.utils`
================

.. py:module:: ape.utils




.. raw:: html

   <h3>Module Contents</h3>


**Functions**:

.. autoapisummary::

   ape.utils.get_relative_path
   ape.utils.deep_merge
   ape.utils.expand_environment_variables
   ape.utils.load_config
   ape.utils.generate_dev_accounts
   ape.utils.gas_estimation_error_message
   ape.utils.extract_nested_value



**Attributes**:

.. autoapisummary::

   ape.utils.GeneratedDevAccount



-----------


.. py:function:: get_relative_path(target: pathlib.Path, anchor: pathlib.Path) -> pathlib.Path

   Compute the relative path of ``target`` relative to ``anchor``,
   which may or may not share a common ancestor.
   NOTE: Both paths must be absolute




.. py:function:: deep_merge(dict1, dict2)

   Return a new dictionary by merging two dictionaries recursively.




.. py:function:: expand_environment_variables(contents: str) -> str




.. py:function:: load_config(path: pathlib.Path, expand_envars=True, must_exist=False) -> Dict




.. data:: GeneratedDevAccount
   

   



.. py:function:: generate_dev_accounts(mnemonic, number_of_accounts: int = 10, hd_path_format="m/44'/60'/0'/{}") -> List[GeneratedDevAccount]

   Creates accounts from the configured test mnemonic.
   Use these accounts (or the mnemonic) in chain-genesis
   for testing providers.




.. py:function:: gas_estimation_error_message(tx_error: Exception) -> str

   Use this method in ``ProviderAPI`` implementations when error handling
   transaction errors. This is to have a consistent experience across providers.




.. py:function:: extract_nested_value(root: Dict, *args: str) -> Optional[Dict]

   Dig through a nested ``Dict`` gives the keys to use in order as arguments.
   Returns the final value if it exists else `None` if the tree ends at any point.



