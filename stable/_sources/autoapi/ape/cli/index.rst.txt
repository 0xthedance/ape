:mod:`ape.cli`
==============

.. py:module:: ape.cli



.. raw:: html

   <h3>Submodules</h3>

.. toctree::
   :titlesonly:
   :maxdepth: 1

   arguments/index.rst
   choices/index.rst
   commands/index.rst
   options/index.rst
   paramtype/index.rst
   utils/index.rst




.. raw:: html

   <h3>Package Contents</h3>

**Classes**:

.. autoapisummary::

   ape.cli.AccountAliasPromptChoice
   ape.cli.Alias
   ape.cli.OutputFormat
   ape.cli.PromptChoice
   ape.cli.NetworkBoundCommand
   ape.cli.AllFilePaths
   ape.cli.Path



**Functions**:

.. autoapisummary::

   ape.cli.contract_file_paths_argument
   ape.cli.existing_alias_argument
   ape.cli.non_existing_alias_argument
   ape.cli.get_user_selected_account
   ape.cli.output_format_choice
   ape.cli.account_option_that_prompts_when_not_given
   ape.cli.ape_cli_context
   ape.cli.contract_option
   ape.cli.network_option
   ape.cli.output_format_option
   ape.cli.skip_confirmation_option




-----------


.. py:function:: contract_file_paths_argument()

   A ``click.argument`` representing contract source file paths.
   This argument takes 0-to-many values.

   The return type from the callback is a flattened list of
   source file-paths.




.. py:function:: existing_alias_argument(account_type: Optional[Type[ape.api.AccountAPI]] = None)

   A ``click.argument`` for an existing account alias.

   Args:
       account_type (type[:class:`~ape.api.accounts.AccountAPI`], optional):
         If given, limits the type of account the user may choose from.




.. py:function:: non_existing_alias_argument()

   A ``click.argument`` for an account alias that does not yet exist in ape.




.. py:class:: AccountAliasPromptChoice(account_type: Optional[Type[ape.api.accounts.AccountAPI]] = None, prompt_message: str = None)

   Bases: :py:obj:`PromptChoice`

   Prompts the user to select an alias from their accounts.
   Useful for adhoc scripts to lessen the need to hard-code aliases.

   .. py:method:: __init__(self, account_type: Optional[Type[ape.api.accounts.AccountAPI]] = None, prompt_message: str = None)


   .. py:method:: convert(self, value: Any, param: Optional[click.Parameter], ctx: Optional[click.Context]) -> Optional[ape.api.accounts.AccountAPI]

      Convert the value to the correct type. This is not called if
      the value is ``None`` (the missing value).

      This must accept string values from the command line, as well as
      values that are already the correct type. It may also convert
      other compatible types.

      The ``param`` and ``ctx`` arguments may be ``None`` in certain
      situations, such as when converting prompt input.

      If the value cannot be converted, call :meth:`fail` with a
      descriptive message.

      :param value: The value to convert.
      :param param: The parameter that is using this type to convert
          its value. May be ``None``.
      :param ctx: The current context that arrived at this value. May
          be ``None``.


   .. py:method:: choices(self) -> List[str]
      :property:

      All the account aliases.

      Returns:
          list[str]: A list of all the account aliases.


   .. py:method:: get_user_selected_account(self) -> ape.api.accounts.AccountAPI

      Returns the selected account.

      Returns:
          :class:`~ape.api.accounts.AccountAPI`


   .. py:method:: fail_from_invalid_choice(self, param)





.. py:class:: Alias(account_type: Optional[Type[ape.api.accounts.AccountAPI]] = None)

   Bases: :py:obj:`click.Choice`

   A ``click.Choice`` for loading account aliases for the active project at runtime.

   Provide an ``account_type`` to limit the type of account to choose from.
   Defaults to all account types in ``choices()``.

   .. attribute:: name
      :annotation: = alias

      

   .. py:method:: __init__(self, account_type: Optional[Type[ape.api.accounts.AccountAPI]] = None)


   .. py:method:: choices(self) -> List[str]
      :property:

      The aliases available to choose from.

      Returns:
          list[str]: A list of account aliases the user may choose from.





.. py:class:: OutputFormat

   Bases: :py:obj:`enum.Enum`

   An enum representing output formats, such as ``TREE`` or ``YAML``.
   Use this to select a subset of common output formats to use
   when creating a :meth:`~ape.cli.choices.output_format_choice`.

   .. attribute:: TREE
      :annotation: = TREE

      A rich text tree view of the data.


   .. attribute:: YAML
      :annotation: = YAML

      A standard .yaml format of the data.





.. py:class:: PromptChoice(choices)

   Bases: :py:obj:`click.ParamType`

   A choice option or argument from user selection.

   .. py:method:: __init__(self, choices)


   .. py:method:: print_choices(self)

      Echo the choices to the terminal.


   .. py:method:: convert(self, value: Any, param: Optional[click.Parameter], ctx: Optional[click.Context]) -> Optional[Any]

      Convert the value to the correct type. This is not called if
      the value is ``None`` (the missing value).

      This must accept string values from the command line, as well as
      values that are already the correct type. It may also convert
      other compatible types.

      The ``param`` and ``ctx`` arguments may be ``None`` in certain
      situations, such as when converting prompt input.

      If the value cannot be converted, call :meth:`fail` with a
      descriptive message.

      :param value: The value to convert.
      :param param: The parameter that is using this type to convert
          its value. May be ``None``.
      :param ctx: The current context that arrived at this value. May
          be ``None``.


   .. py:method:: fail_from_invalid_choice(self, param)





.. py:function:: get_user_selected_account(account_type: Optional[Type[ape.api.accounts.AccountAPI]] = None, prompt_message: Optional[str] = None) -> ape.api.accounts.AccountAPI

   Prompt the user to pick from their accounts and return that account.
   Use this method if you want to prompt users to select accounts _outside_
   of CLI options. For CLI options, use
   :meth:`~ape.cli.options.account_option_that_prompts_when_not_given`.

   Args:
       account_type (type[:class:`~ape.api.accounts.AccountAPI`], optional):
         If given, the user may only select an account of this type.
       prompt_message (str, optional): Customize the prompt message.

   Returns:
       :class:`~ape.api.accounts.AccountAPI`




.. py:function:: output_format_choice(options: List[OutputFormat] = None) -> click.Choice

   Returns a ``click.Choice()`` type for the given options.

   Args:
       options (list[:class:`~ape.choices.OutputFormat`], optional):
         Limit the formats to accept. Defaults to allowing all formats.

   Returns:
       :class:`click.Choice`




.. py:class:: NetworkBoundCommand(name: Optional[str], context_settings: Optional[Dict[str, Any]] = None, callback: Optional[Callable[Ellipsis, Any]] = None, params: Optional[List[Parameter]] = None, help: Optional[str] = None, epilog: Optional[str] = None, short_help: Optional[str] = None, options_metavar: Optional[str] = '[OPTIONS]', add_help_option: bool = True, no_args_is_help: bool = False, hidden: bool = False, deprecated: bool = False)

   Bases: :py:obj:`click.Command`

   A command that uses the :meth:`~ape.cli.options.network_option`.
   It will automatically set the network for the duration of the command execution.

   .. py:method:: invoke(self, ctx: click.Context) -> Any

      Given a context, this invokes the attached callback (if it exists)
      in the right way.





.. py:function:: account_option_that_prompts_when_not_given()

   Accepts either the account alias or the account number.
   If not given anything, it will prompt the user to select an account.




.. py:function:: ape_cli_context()

   A ``click`` context object with helpful utilities.
   Use in your commands to get access to common utility features,
   such as logging or accessing managers.




.. py:function:: contract_option(help=None, required=False, multiple=False)

   Contract(s) from the current project.
   If you pass ``multiple=True``, you will get a list of contract types from the callback.




.. py:function:: network_option(default: str = networks.default_ecosystem.name)

   A ``click.option`` for specifying a network.

   Args:
       default (str): Optionally, change which network to
         use as the default. Defaults to how ``ape`` normally
         selects a default network.




.. py:function:: output_format_option(default: ape.cli.choices.OutputFormat = OutputFormat.TREE)

   A ``click.option`` for specifying a format to use when outputting data.

   Args:
       default (:class:`~ape.cli.choices.OutputFormat`): Defaults to ``TREE`` format.




.. py:function:: skip_confirmation_option(help='')

   A ``click.option`` for skipping confirmation (``--yes``).

   Args:
       help (str): CLI option help text. Defaults to ``""``.




.. py:class:: AllFilePaths(*args, **kwargs)

   Bases: :py:obj:`Path`

   Either all the file paths in the given directory,
   or a list containing only the given file.

   .. py:method:: convert(self, value: Any, param: Optional[click.Parameter], ctx: Optional[click.Context]) -> List[pathlib.Path]

      Convert the value to the correct type. This is not called if
      the value is ``None`` (the missing value).

      This must accept string values from the command line, as well as
      values that are already the correct type. It may also convert
      other compatible types.

      The ``param`` and ``ctx`` arguments may be ``None`` in certain
      situations, such as when converting prompt input.

      If the value cannot be converted, call :meth:`fail` with a
      descriptive message.

      :param value: The value to convert.
      :param param: The parameter that is using this type to convert
          its value. May be ``None``.
      :param ctx: The current context that arrived at this value. May
          be ``None``.





.. py:class:: Path(*args, **kwargs)

   Bases: :py:obj:`click.Path`

   This class exists to encourage the consistent usage
   of ``pathlib.Path`` for path_type.

   .. py:method:: __init__(self, *args, **kwargs)





.. py:exception:: Abort(message)

   Bases: :py:obj:`click.ClickException`

   A wrapper around a CLI exception. When you raise this error,
   the error is nicely printed to the terminal. This is
   useful for all user-facing errors.

   .. py:method:: __init__(self, message)

      Initialize self.  See help(type(self)) for accurate signature.


   .. py:method:: show(self, file=None)

      Override default ``show`` to print CLI errors in red text.




