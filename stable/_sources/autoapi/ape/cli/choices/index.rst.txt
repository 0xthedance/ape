:mod:`ape.cli.choices`
======================

.. py:module:: ape.cli.choices




.. raw:: html

   <h3>Module Contents</h3>

**Classes**:

.. autoapisummary::

   ape.cli.choices.Alias
   ape.cli.choices.PromptChoice
   ape.cli.choices.AccountAliasPromptChoice
   ape.cli.choices.NetworkChoice
   ape.cli.choices.OutputFormat



**Functions**:

.. autoapisummary::

   ape.cli.choices._get_account_by_type
   ape.cli.choices.get_user_selected_account
   ape.cli.choices.output_format_choice




-----------


.. py:function:: _get_account_by_type(account_type: Optional[Type[ape.api.accounts.AccountAPI]] = None) -> List[ape.api.accounts.AccountAPI]




.. py:class:: Alias(account_type: Optional[Type[ape.api.accounts.AccountAPI]] = None)

   Bases: :py:obj:`click.Choice`

   A ``click.Choice`` for loading account aliases for the active project at runtime.

   Provide an ``account_type`` to limit the type of account to choose from.
   Defaults to all account types in ``choices()``.

   .. attribute:: name
      :annotation: = alias

      

   .. py:method:: __init__(self, account_type: Optional[Type[ape.api.accounts.AccountAPI]] = None)


   .. py:method:: choices(self) -> List[str]
      :property:

      The aliases available to choose from.

      Returns:
          list[str]: A list of account aliases the user may choose from.





.. py:class:: PromptChoice(choices)

   Bases: :py:obj:`click.ParamType`

   A choice option or argument from user selection.

   .. py:method:: __init__(self, choices)


   .. py:method:: print_choices(self)

      Echo the choices to the terminal.


   .. py:method:: convert(self, value: Any, param: Optional[click.Parameter], ctx: Optional[click.Context]) -> Optional[Any]

      Convert the value to the correct type. This is not called if
      the value is ``None`` (the missing value).

      This must accept string values from the command line, as well as
      values that are already the correct type. It may also convert
      other compatible types.

      The ``param`` and ``ctx`` arguments may be ``None`` in certain
      situations, such as when converting prompt input.

      If the value cannot be converted, call :meth:`fail` with a
      descriptive message.

      :param value: The value to convert.
      :param param: The parameter that is using this type to convert
          its value. May be ``None``.
      :param ctx: The current context that arrived at this value. May
          be ``None``.


   .. py:method:: fail_from_invalid_choice(self, param)





.. py:function:: get_user_selected_account(account_type: Optional[Type[ape.api.accounts.AccountAPI]] = None, prompt_message: Optional[str] = None) -> ape.api.accounts.AccountAPI

   Prompt the user to pick from their accounts and return that account.
   Use this method if you want to prompt users to select accounts _outside_
   of CLI options. For CLI options, use
   :meth:`~ape.cli.options.account_option_that_prompts_when_not_given`.

   Args:
       account_type (type[:class:`~ape.api.accounts.AccountAPI`], optional):
         If given, the user may only select an account of this type.
       prompt_message (str, optional): Customize the prompt message.

   Returns:
       :class:`~ape.api.accounts.AccountAPI`




.. py:class:: AccountAliasPromptChoice(account_type: Optional[Type[ape.api.accounts.AccountAPI]] = None, prompt_message: str = None)

   Bases: :py:obj:`PromptChoice`

   Prompts the user to select an alias from their accounts.
   Useful for adhoc scripts to lessen the need to hard-code aliases.

   .. py:method:: __init__(self, account_type: Optional[Type[ape.api.accounts.AccountAPI]] = None, prompt_message: str = None)


   .. py:method:: convert(self, value: Any, param: Optional[click.Parameter], ctx: Optional[click.Context]) -> Optional[ape.api.accounts.AccountAPI]

      Convert the value to the correct type. This is not called if
      the value is ``None`` (the missing value).

      This must accept string values from the command line, as well as
      values that are already the correct type. It may also convert
      other compatible types.

      The ``param`` and ``ctx`` arguments may be ``None`` in certain
      situations, such as when converting prompt input.

      If the value cannot be converted, call :meth:`fail` with a
      descriptive message.

      :param value: The value to convert.
      :param param: The parameter that is using this type to convert
          its value. May be ``None``.
      :param ctx: The current context that arrived at this value. May
          be ``None``.


   .. py:method:: choices(self) -> List[str]
      :property:

      All the account aliases.

      Returns:
          list[str]: A list of all the account aliases.


   .. py:method:: get_user_selected_account(self) -> ape.api.accounts.AccountAPI

      Returns the selected account.

      Returns:
          :class:`~ape.api.accounts.AccountAPI`


   .. py:method:: fail_from_invalid_choice(self, param)





.. py:class:: NetworkChoice(case_sensitive=True)

   Bases: :py:obj:`click.Choice`

   A ``click.Choice`` to provide network choice defaults for the active project.

   .. py:method:: __init__(self, case_sensitive=True)


   .. py:method:: get_metavar(self, param)

      Returns the metavar default for this param if it provides one.





.. py:class:: OutputFormat

   Bases: :py:obj:`enum.Enum`

   An enum representing output formats, such as ``TREE`` or ``YAML``.
   Use this to select a subset of common output formats to use
   when creating a :meth:`~ape.cli.choices.output_format_choice`.

   .. attribute:: TREE
      :annotation: = TREE

      A rich text tree view of the data.


   .. attribute:: YAML
      :annotation: = YAML

      A standard .yaml format of the data.





.. py:function:: output_format_choice(options: List[OutputFormat] = None) -> click.Choice

   Returns a ``click.Choice()`` type for the given options.

   Args:
       options (list[:class:`~ape.choices.OutputFormat`], optional):
         Limit the formats to accept. Defaults to allowing all formats.

   Returns:
       :class:`click.Choice`



