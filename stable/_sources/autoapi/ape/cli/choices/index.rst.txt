:mod:`ape.cli.choices`
======================

.. py:module:: ape.cli.choices




.. raw:: html

   <h3>Module Contents</h3>

**Classes**:

.. autoapisummary::

   ape.cli.choices.Alias
   ape.cli.choices.PromptChoice
   ape.cli.choices.NetworkChoice





-----------


.. py:class:: Alias(account_type: Optional[Type[ape.api.accounts.AccountAPI]] = None)

   Bases: :py:obj:`click.Choice`

   Wraps ``click.Choice`` to load account aliases for the active project at runtime.

   Provide an ``account_type`` to limit the type of account to choose from.
   Defaults to all account types in ``choices()``.

   .. attribute:: name
      :annotation: = alias

      

   .. py:method:: __init__(self, account_type: Optional[Type[ape.api.accounts.AccountAPI]] = None)


   .. py:method:: choices(self) -> List[str]
      :property:





.. py:class:: PromptChoice(choices)

   Bases: :py:obj:`click.ParamType`

   A choice option or argument from user selection.

   .. py:method:: __init__(self, choices)


   .. py:method:: print_choices(self)


   .. py:method:: convert(self, value: Any, param: Optional[click.Parameter], ctx: Optional[click.Context]) -> Optional[str]

      Convert the value to the correct type. This is not called if
      the value is ``None`` (the missing value).

      This must accept string values from the command line, as well as
      values that are already the correct type. It may also convert
      other compatible types.

      The ``param`` and ``ctx`` arguments may be ``None`` in certain
      situations, such as when converting prompt input.

      If the value cannot be converted, call :meth:`fail` with a
      descriptive message.

      :param value: The value to convert.
      :param param: The parameter that is using this type to convert
          its value. May be ``None``.
      :param ctx: The current context that arrived at this value. May
          be ``None``.





.. py:class:: NetworkChoice(case_sensitive=True)

   Bases: :py:obj:`click.Choice`

   Wraps ``click.Choice`` to provide network choice defaults for the active project.

   .. py:method:: __init__(self, case_sensitive=True)


   .. py:method:: get_metavar(self, param)

      Returns the metavar default for this param if it provides one.




