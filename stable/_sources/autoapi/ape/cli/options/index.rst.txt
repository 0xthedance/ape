:mod:`ape.cli.options`
======================

.. py:module:: ape.cli.options




.. raw:: html

   <h3>Module Contents</h3>

**Classes**:

.. autoapisummary::

   ape.cli.options.ApeCliContextObject



**Functions**:

.. autoapisummary::

   ape.cli.options.verbosity_option
   ape.cli.options.ape_cli_context
   ape.cli.options.network_option
   ape.cli.options.skip_confirmation_option
   ape.cli.options._account_callback
   ape.cli.options.account_option_that_prompts_when_not_given
   ape.cli.options._load_contracts
   ape.cli.options.contract_option
   ape.cli.options.output_format_option




-----------


.. py:class:: ApeCliContextObject

   A class that can be auto-imported into a plugin ``click.command()``
   via ``@ape_cli_context()``. It can help do common CLI tasks such as log
   messages to the user or abort execution.

   .. py:method:: __init__(self)


   .. py:method:: project(self)
      :property:


   .. py:method:: abort(msg: str, base_error: Exception = None)
      :staticmethod:





.. py:function:: verbosity_option(cli_logger)

   A decorator that adds a `--verbosity, -v` option to the decorated
   command.




.. py:function:: ape_cli_context()




.. py:function:: network_option(default: str = networks.default_ecosystem.name)




.. py:function:: skip_confirmation_option(help='')




.. py:function:: _account_callback(ctx, param, value)




.. py:function:: account_option_that_prompts_when_not_given()

   Accepts either the account alias or the account number.
   If not given anything, it will prompt the user to select an account.




.. py:function:: _load_contracts(ctx, param, value) -> Optional[Union[ape.types.ContractType, List[ape.types.ContractType]]]




.. py:function:: contract_option(help=None, required=False, multiple=False)

   Contract(s) from the current project.
   If you pass ``multiple=True``, you will get a list of contract types from the callback.




.. py:function:: output_format_option(default: ape.cli.choices.OutputFormat = OutputFormat.TREE)



