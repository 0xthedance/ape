:mod:`ape_ethereum.ecosystem`
=============================

.. py:module:: ape_ethereum.ecosystem




.. raw:: html

   <h3>Module Contents</h3>

**Classes**:

.. autoapisummary::

   ape_ethereum.ecosystem.BaseTransaction
   ape_ethereum.ecosystem.StaticFeeTransaction
   ape_ethereum.ecosystem.DynamicFeeTransaction
   ape_ethereum.ecosystem.Receipt
   ape_ethereum.ecosystem.BlockGasFee
   ape_ethereum.ecosystem.BlockConsensus
   ape_ethereum.ecosystem.Block
   ape_ethereum.ecosystem.Ethereum




**Attributes**:

.. autoapisummary::

   ape_ethereum.ecosystem.NETWORKS



-----------


.. data:: NETWORKS
   

   



.. py:class:: BaseTransaction

   Bases: :py:obj:`ape.api.TransactionAPI`

   .. py:method:: is_valid(self) -> bool


   .. py:method:: as_dict(self) -> dict


   .. py:method:: encode(self) -> bytes

      Take this object and produce a hash to sign to submit a transaction





.. py:class:: StaticFeeTransaction

   Bases: :py:obj:`BaseTransaction`

   Transactions that are pre-EIP-1559 and use the ``gasPrice`` field.

   .. attribute:: gas_price
      :annotation: :int

      

   .. attribute:: type
      :annotation: :ape.api.TransactionType

      

   .. py:method:: max_fee(self) -> int
      :property:

      The total amount in fees willing to be spent on a transaction.
      Override this property as needed, such as for EIP-1559 differences.

      See :class:`~ape_ethereum.ecosystem.StaticFeeTransaction` and
      :class`~ape_ethereum.ecosystem.DynamicFeeTransaction` as examples.


   .. py:method:: as_dict(self)





.. py:class:: DynamicFeeTransaction

   Bases: :py:obj:`BaseTransaction`

   Transactions that are post-EIP-1559 and use the ``maxFeePerGas``
   and ``maxPriorityFeePerGas`` fields.

   .. attribute:: max_fee
      :annotation: :int

      

   .. attribute:: max_priority_fee
      :annotation: :int

      

   .. attribute:: type
      :annotation: :ape.api.TransactionType

      

   .. py:method:: as_dict(self)





.. py:class:: Receipt

   Bases: :py:obj:`ape.api.ReceiptAPI`

   .. py:method:: raise_for_status(self, txn: ape.api.TransactionAPI)

      Raises :class`~ape.exceptions.OutOfGasError` when the
      transaction failed and consumed all the gas.

      Raises :class:`~ape.exceptions.TransactionError`
      when the transaction has a failing status otherwise.


   .. py:method:: decode(cls, data: dict) -> ape.api.ReceiptAPI
      :classmethod:





.. py:class:: BlockGasFee

   Bases: :py:obj:`ape.api.BlockGasAPI`

   .. py:method:: decode(cls, data: Dict) -> ape.api.BlockGasAPI
      :classmethod:





.. py:class:: BlockConsensus

   Bases: :py:obj:`ape.api.BlockConsensusAPI`

   .. attribute:: difficulty
      :annotation: :Optional[int]

      

   .. attribute:: total_difficulty
      :annotation: :Optional[int]

      

   .. py:method:: decode(cls, data: Dict) -> ape.api.BlockConsensusAPI
      :classmethod:





.. py:class:: Block

   Bases: :py:obj:`ape.api.BlockAPI`

   .. py:method:: decode(cls, data: Dict) -> ape.api.BlockAPI
      :classmethod:





.. py:class:: Ethereum

   Bases: :py:obj:`ape.api.EcosystemAPI`

   An Ecosystem is a set of related Networks

   .. attribute:: transaction_types
      

      

   .. attribute:: receipt_class
      

      

   .. attribute:: block_class
      

      

   .. py:method:: encode_calldata(self, abi: ape.types.ABI, *args) -> bytes


   .. py:method:: decode_calldata(self, abi: ape.types.ABI, raw_data: bytes) -> Any


   .. py:method:: encode_deployment(self, deployment_bytecode: bytes, abi: Optional[ape.types.ABI], *args, **kwargs) -> BaseTransaction


   .. py:method:: encode_transaction(self, address: ape.types.AddressType, abi: ape.types.ABI, *args, **kwargs) -> BaseTransaction


   .. py:method:: create_transaction(self, **kwargs) -> ape.api.TransactionAPI

      Returns a tranaction using the given constructor kwargs.


   .. py:method:: decode_event(self, abi: ape.types.ABI, receipt: ape.api.ReceiptAPI) -> ape.api.ContractLog




