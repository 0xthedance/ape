:mod:`ape_test.accounts`
========================

.. py:module:: ape_test.accounts




.. raw:: html

   <h3>Module Contents</h3>

**Classes**:

.. autoapisummary::

   ape_test.accounts.TestAccountContainer
   ape_test.accounts.TestAccount





-----------


.. py:class:: TestAccountContainer

   Bases: :py:obj:`ape.api.TestAccountContainerAPI`

   Test account containers for ``ape test`` should implement
   this API instead of ``AccountContainerAPI`` directly. This
   is how they show up in the ``accounts`` test fixture.

   .. py:method:: config(self)
      :property:


   .. py:method:: _dev_accounts(self) -> List[ape.utils.GeneratedDevAccount]


   .. py:method:: aliases(self) -> Iterator[str]
      :property:


   .. py:method:: __len__(self) -> int


   .. py:method:: __iter__(self) -> Iterator[ape.api.TestAccountAPI]





.. py:class:: TestAccount

   Bases: :py:obj:`ape.api.TestAccountAPI`

   Test accounts for ``ape test`` should implement this API
   instead of ``AccountAPI`` directly. This is how they show
   up in the ``accounts`` test fixture.

   .. attribute:: _index
      :annotation: :int

      

   .. attribute:: _address
      :annotation: :str

      

   .. attribute:: _private_key
      :annotation: :str

      

   .. py:method:: alias(self) -> str
      :property:

      Override with whatever alias might want to use, if applicable


   .. py:method:: address(self) -> ape.types.AddressType
      :property:


   .. py:method:: sign_message(self, msg: eth_account.messages.SignableMessage) -> Optional[ape.types.MessageSignature]

      Signs the given message.

      Args:
        msg (:class:`~eth_account.messages.SignableMessage`): The message to sign.

      Returns:
        :class:`~ape.types.signatures.MessageSignature` (optional): The signed message.


   .. py:method:: sign_transaction(self, txn: ape.api.TransactionAPI) -> Optional[ape.types.TransactionSignature]

      Signs the given transaction.

      Args:
        txn (:class:`~ape.api.providers.TransactionAPI`): The transaction to sign.

      Returns:
        :class:`~ape.types.signatures.TransactionSignature` (optional): The signed transaction.




