:mod:`ape_test`
===============

.. py:module:: ape_test



.. raw:: html

   <h3>Submodules</h3>

.. toctree::
   :titlesonly:
   :maxdepth: 1

   _cli/index.rst
   accounts/index.rst
   contextmanagers/index.rst
   fixtures/index.rst
   plugin/index.rst
   providers/index.rst
   runners/index.rst




.. raw:: html

   <h3>Package Contents</h3>

**Classes**:

.. autoapisummary::

   ape_test.TestAccount
   ape_test.TestAccountContainer
   ape_test.LocalNetwork
   ape_test.Config



**Functions**:

.. autoapisummary::

   ape_test.config_class
   ape_test.account_types
   ape_test.providers




-----------


.. py:class:: TestAccount

   Bases: :py:obj:`ape.api.TestAccountAPI`

   Test accounts for ``ape test`` should implement this API
   instead of ``AccountAPI`` directly. This is how they show
   up in the ``accounts`` test fixture.

   .. attribute:: _index
      :annotation: :int

      

   .. attribute:: _address
      :annotation: :str

      

   .. attribute:: _private_key
      :annotation: :str

      

   .. py:method:: alias(self) -> str
      :property:

      Override with whatever alias might want to use, if applicable


   .. py:method:: address(self) -> ape.types.AddressType
      :property:

      The address of this account. Subclasses must override and provide this value.

      Returns:
          :class:`~ape.types.AddressType`


   .. py:method:: sign_message(self, msg: eth_account.messages.SignableMessage) -> Optional[ape.types.MessageSignature]

      Signs the given message.

      Args:
        msg (:class:`~eth_account.messages.SignableMessage`): The message to sign.

      Returns:
        :class:`~ape.types.signatures.MessageSignature` (optional): The signed message.


   .. py:method:: sign_transaction(self, txn: ape.api.TransactionAPI) -> Optional[ape.types.TransactionSignature]

      Signs the given transaction.

      Args:
        txn (:class:`~ape.api.providers.TransactionAPI`): The transaction to sign.

      Returns:
        :class:`~ape.types.signatures.TransactionSignature` (optional): The signed transaction.





.. py:class:: TestAccountContainer

   Bases: :py:obj:`ape.api.TestAccountContainerAPI`

   Test account containers for ``ape test`` should implement
   this API instead of ``AccountContainerAPI`` directly. This
   is how they show up in the ``accounts`` test fixture.

   .. py:method:: config(self)
      :property:


   .. py:method:: _dev_accounts(self) -> List[ape.utils.GeneratedDevAccount]


   .. py:method:: aliases(self) -> Iterator[str]
      :property:


   .. py:method:: __len__(self) -> int


   .. py:method:: __iter__(self) -> Iterator[ape.api.TestAccountAPI]





.. py:class:: LocalNetwork

   Bases: :py:obj:`ape.api.TestProviderAPI`, :py:obj:`ape.api.Web3Provider`

   An API for providers that have development functionality, such as snapshotting.

   .. py:method:: connect(self)


   .. py:method:: disconnect(self)


   .. py:method:: update_settings(self, new_settings: dict)

      Update the provider settings and re-connect.


   .. py:method:: __post_init__(self)


   .. py:method:: estimate_gas_cost(self, txn: ape.api.TransactionAPI) -> int

      Generates and returns an estimate of how much gas is necessary
      to allow the transaction to complete.
      The transaction will not be added to the blockchain.


   .. py:method:: gas_price(self) -> int
      :property:

      Returns the current price per gas in wei.


   .. py:method:: priority_fee(self) -> int
      :property:

      Returns 0 because test chains do not care about priority fees.


   .. py:method:: send_call(self, txn: ape.api.TransactionAPI) -> bytes

      Executes a new message call immediately without creating a
      transaction on the block chain.


   .. py:method:: send_transaction(self, txn: ape.api.TransactionAPI) -> ape.api.ReceiptAPI


   .. py:method:: snapshot(self) -> str


   .. py:method:: revert(self, snapshot_id: str)





.. py:class:: Config

   Bases: :py:obj:`ape.api.ConfigItem`

   Each plugin must inherit from this Config base class

   .. attribute:: mnemonic
      :annotation: :str = test test test test test test test test test test test junk

      

   .. attribute:: number_of_accounts
      :annotation: :int = 10

      




.. py:function:: config_class()




.. py:function:: account_types()




.. py:function:: providers()



