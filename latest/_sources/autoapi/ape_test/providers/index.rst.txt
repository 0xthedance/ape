:mod:`ape_test.providers`
=========================

.. py:module:: ape_test.providers




.. raw:: html

   <h3>Module Contents</h3>

**Classes**:

.. autoapisummary::

   ape_test.providers.LocalNetwork



**Functions**:

.. autoapisummary::

   ape_test.providers._get_vm_err




-----------


.. py:class:: LocalNetwork

   Bases: :py:obj:`ape.api.TestProviderAPI`, :py:obj:`ape.api.Web3Provider`

   An API for providers that have development functionality, such as snapshotting.

   .. py:method:: connect(self)


   .. py:method:: disconnect(self)


   .. py:method:: update_settings(self, new_settings: dict)

      Update the provider settings and re-connect.


   .. py:method:: __post_init__(self)


   .. py:method:: estimate_gas_cost(self, txn: ape.api.TransactionAPI) -> int

      Generates and returns an estimate of how much gas is necessary
      to allow the transaction to complete.
      The transaction will not be added to the blockchain.


   .. py:method:: gas_price(self) -> int
      :property:

      Returns the current price per gas in wei.


   .. py:method:: priority_fee(self) -> int
      :property:

      Returns 0 because test chains do not care about priority fees.


   .. py:method:: send_call(self, txn: ape.api.TransactionAPI) -> bytes

      Executes a new message call immediately without creating a
      transaction on the block chain.


   .. py:method:: send_transaction(self, txn: ape.api.TransactionAPI) -> ape.api.ReceiptAPI


   .. py:method:: snapshot(self) -> str


   .. py:method:: revert(self, snapshot_id: str)





.. py:function:: _get_vm_err(web3_err: eth_tester.exceptions.TransactionFailed) -> ape.exceptions.ContractLogicError



