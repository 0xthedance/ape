:mod:`ape_test.providers`
=========================

.. py:module:: ape_test.providers




.. raw:: html

   <h3>Module Contents</h3>

**Classes**:

.. autoapisummary::

   ape_test.providers.LocalNetwork





-----------


.. py:class:: LocalNetwork

   Bases: :py:obj:`ape.api.TestProviderAPI`

   An API for providers that have development functionality, such as snapshotting.

   .. attribute:: _web3
      :annotation: :web3.Web3

      

   .. py:method:: connect(self)


   .. py:method:: disconnect(self)


   .. py:method:: update_settings(self, new_settings: dict)


   .. py:method:: __post_init__(self)


   .. py:method:: estimate_gas_cost(self, txn: ape.api.TransactionAPI) -> int


   .. py:method:: chain_id(self) -> int
      :property:


   .. py:method:: gas_price(self) -> int
      :property:


   .. py:method:: priority_fee(self) -> int
      :property:

      Returns 0 because test chains do not care about priority fees.


   .. py:method:: base_fee(self) -> int
      :property:

      Returns 0 because test chains do not care about base fees.


   .. py:method:: get_nonce(self, address: str) -> int


   .. py:method:: get_balance(self, address: str) -> int


   .. py:method:: get_code(self, address: str) -> bytes


   .. py:method:: send_call(self, txn: ape.api.TransactionAPI) -> bytes


   .. py:method:: get_transaction(self, txn_hash: str) -> ape.api.ReceiptAPI


   .. py:method:: send_transaction(self, txn: ape.api.TransactionAPI) -> ape.api.ReceiptAPI


   .. py:method:: get_events(self, **filter_params) -> Iterator[dict]


   .. py:method:: snapshot(self) -> str


   .. py:method:: revert(self, snapshot_id: str)




