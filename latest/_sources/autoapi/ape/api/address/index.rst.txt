:mod:`ape.api.address`
======================

.. py:module:: ape.api.address




.. raw:: html

   <h3>Module Contents</h3>

**Classes**:

.. autoapisummary::

   ape.api.address.AddressAPI
   ape.api.address.Address





-----------


.. py:class:: AddressAPI

   A base address API class. All account-types subclass this type.

   .. attribute:: _provider
      :annotation: :Optional[ape.api.providers.ProviderAPI]

      

   .. py:method:: provider(self) -> ape.api.providers.ProviderAPI
      :property:

      The current active provider if connected to one.
      If there is no active provider at runtime, then this raises an
      :class:`~ape.exceptions.AddressError`.

      Returns:
          :class:`~ape.api.providers.ProviderAPI`


   .. py:method:: address(self) -> ape.types.AddressType
      :property:

      The address of this account. Subclasses must override and provide this value.

      Returns:
          :class:`~ape.types.AddressType`


   .. py:method:: __dir__(self) -> List[str]

      Display methods to IPython on ``a.[TAB]`` tab completion.

      Returns:
          list[str]: Method names that IPython uses for tab completion.


   .. py:method:: __repr__(self) -> str

      Return repr(self).


   .. py:method:: __str__(self) -> str

      Convert this class to a ``str`` address.

      Returns:
          str: The stringified address.


   .. py:method:: nonce(self) -> int
      :property:

      The number of transactions associated with the address.

      Returns:
          int


   .. py:method:: balance(self) -> int
      :property:

      The total balance of the account.

      Returns:
          int


   .. py:method:: code(self) -> bytes
      :property:

      The smart-contract code at the address.

      Returns:
          bytes: The raw bytes of the contract.


   .. py:method:: codesize(self) -> int
      :property:

      The size of the smart-contract.

      Returns:
          int: The number of bytes in the smart contract.


   .. py:method:: is_contract(self) -> bool
      :property:

      ``True`` when there is code associated with the address.

      Returns:
          bool





.. py:class:: Address

   Bases: :py:obj:`AddressAPI`

   A generic blockchain address.
   Typically, this is used when we do not know the contract type at a given address,
   or to refer to an EOA the user doesn't personally control.

   .. attribute:: _address
      :annotation: :ape.types.AddressType

      

   .. py:method:: address(self) -> ape.types.AddressType
      :property:

      The raw address type.

      Returns:
          :class:`~ape.types.AddressType`




