:mod:`ape.cli`
==============

.. py:module:: ape.cli



.. raw:: html

   <h3>Submodules</h3>

.. toctree::
   :titlesonly:
   :maxdepth: 1

   arguments/index.rst
   choices/index.rst
   commands/index.rst
   options/index.rst
   paramtype/index.rst
   utils/index.rst




.. raw:: html

   <h3>Package Contents</h3>

**Classes**:

.. autoapisummary::

   ape.cli.Alias
   ape.cli.PromptChoice
   ape.cli.NetworkBoundCommand



**Functions**:

.. autoapisummary::

   ape.cli.existing_alias_argument
   ape.cli.ape_cli_context
   ape.cli.skip_confirmation_option



**Attributes**:

.. autoapisummary::

   ape.cli.non_existing_alias_argument
   ape.cli.network_option



-----------


.. py:function:: existing_alias_argument(account_type: Optional[Type[ape.api.AccountAPI]] = None)




.. data:: non_existing_alias_argument
   

   



.. py:class:: Alias(account_type: Optional[Type[ape.api.accounts.AccountAPI]] = None)

   Bases: :py:obj:`click.Choice`

   Wraps ``click.Choice`` to load account aliases for the active project at runtime.

   Provide an ``account_type`` to limit the type of account to choose from.
   Defaults to all account types in ``choices()``.

   .. attribute:: name
      :annotation: = alias

      

   .. py:method:: __init__(self, account_type: Optional[Type[ape.api.accounts.AccountAPI]] = None)


   .. py:method:: choices(self) -> List[str]
      :property:





.. py:class:: PromptChoice(choices)

   Bases: :py:obj:`click.ParamType`

   A choice option or argument from user selection.

   .. py:method:: __init__(self, choices)


   .. py:method:: print_choices(self)


   .. py:method:: convert(self, value: Any, param: Optional[click.Parameter], ctx: Optional[click.Context]) -> Optional[str]

      Convert the value to the correct type. This is not called if
      the value is ``None`` (the missing value).

      This must accept string values from the command line, as well as
      values that are already the correct type. It may also convert
      other compatible types.

      The ``param`` and ``ctx`` arguments may be ``None`` in certain
      situations, such as when converting prompt input.

      If the value cannot be converted, call :meth:`fail` with a
      descriptive message.

      :param value: The value to convert.
      :param param: The parameter that is using this type to convert
          its value. May be ``None``.
      :param ctx: The current context that arrived at this value. May
          be ``None``.





.. py:class:: NetworkBoundCommand(name: Optional[str], context_settings: Optional[Dict[str, Any]] = None, callback: Optional[Callable[Ellipsis, Any]] = None, params: Optional[List[Parameter]] = None, help: Optional[str] = None, epilog: Optional[str] = None, short_help: Optional[str] = None, options_metavar: Optional[str] = '[OPTIONS]', add_help_option: bool = True, no_args_is_help: bool = False, hidden: bool = False, deprecated: bool = False)

   Bases: :py:obj:`click.Command`

   A command that uses the network option.
   It will automatically set the network for the duration of the command execution.

   .. py:method:: invoke(self, ctx: click.Context) -> Any

      Given a context, this invokes the attached callback (if it exists)
      in the right way.





.. py:function:: ape_cli_context()




.. data:: network_option
   

   



.. py:function:: skip_confirmation_option(help='')




.. py:exception:: Abort(message: str)

   Bases: :py:obj:`click.ClickException`

   Wrapper around a CLI exception

   .. py:method:: show(self, file=None)

      Override default ``show`` to print CLI errors in red text.




