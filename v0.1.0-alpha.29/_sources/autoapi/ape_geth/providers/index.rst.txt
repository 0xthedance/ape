:mod:`ape_geth.providers`
=========================

.. py:module:: ape_geth.providers




.. raw:: html

   <h3>Module Contents</h3>

**Classes**:

.. autoapisummary::

   ape_geth.providers.EphemeralGeth
   ape_geth.providers.GethNetworkConfig
   ape_geth.providers.NetworkConfig
   ape_geth.providers.GethProvider



**Functions**:

.. autoapisummary::

   ape_geth.providers._get_vm_error



**Attributes**:

.. autoapisummary::

   ape_geth.providers.DEFAULT_SETTINGS



-----------


.. data:: DEFAULT_SETTINGS
   

   



.. py:class:: EphemeralGeth(base_directory: pathlib.Path, hostname: str, port: int, mnemonic: str, number_of_accounts: int, chain_id: int = 1337, initial_balance: Union[str, int] = to_wei(10000, 'ether'))

   Bases: :py:obj:`geth.LoggingMixin`, :py:obj:`geth.process.BaseGethProcess`

   A developer-configured geth that only exists until disconnected.

   .. py:method:: __init__(self, base_directory: pathlib.Path, hostname: str, port: int, mnemonic: str, number_of_accounts: int, chain_id: int = 1337, initial_balance: Union[str, int] = to_wei(10000, 'ether'))


   .. py:method:: connect(self)


   .. py:method:: disconnect(self)


   .. py:method:: _clean(self)





.. py:class:: GethNetworkConfig

   Bases: :py:obj:`ape.api.config.ConfigItem`

   Each plugin must inherit from this Config base class

   .. attribute:: mainnet
      :annotation: :dict

      

   .. attribute:: ropsten
      :annotation: :dict

      

   .. attribute:: rinkeby
      :annotation: :dict

      

   .. attribute:: kovan
      :annotation: :dict

      

   .. attribute:: goerli
      :annotation: :dict

      

   .. attribute:: development
      :annotation: :dict

      




.. py:class:: NetworkConfig

   Bases: :py:obj:`ape.api.config.ConfigItem`

   Each plugin must inherit from this Config base class

   .. attribute:: ethereum
      :annotation: :GethNetworkConfig

      




.. py:exception:: GethNotInstalledError

   Bases: :py:obj:`requests.exceptions.ConnectionError`

   A Connection error occurred.

   .. py:method:: __init__(self)

      Initialize RequestException with `request` and `response` objects.





.. py:class:: GethProvider

   Bases: :py:obj:`ape.api.Web3Provider`, :py:obj:`ape.api.UpstreamProvider`

   A base provider that is web3 based.

   .. attribute:: _geth
      :annotation: :Optional[EphemeralGeth]

      

   .. py:method:: uri(self) -> str
      :property:


   .. py:method:: connection_str(self) -> str
      :property:

      The str used by downstream providers to connect to this one.
      For example, the URL for HTTP-based providers.


   .. py:method:: connect(self)


   .. py:method:: disconnect(self)


   .. py:method:: estimate_gas_cost(self, txn: ape.api.TransactionAPI) -> int

      Generates and returns an estimate of how much gas is necessary
      to allow the transaction to complete.
      The transaction will not be added to the blockchain.


   .. py:method:: _node_info(self) -> Optional[web3.types.NodeInfo]
      :property:


   .. py:method:: send_transaction(self, txn: ape.api.TransactionAPI) -> ape.api.ReceiptAPI

      Creates a new message call transaction or a contract creation
      for signed transactions.





.. py:function:: _get_vm_error(web3_value_error: ValueError) -> ape.exceptions.TransactionError

   Returns a custom error from ``ValueError`` from web3.py.



